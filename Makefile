SOLVER_TIMEOUT ?= 900

# EXTRACTOR = os-schedules-extract-csv-data
# REPORTER = os-schedules-report
EXTRACTOR = openstack_schedules/extract_csv_data.py
REPORTER = openstack_schedules/report.py

# Executables
PY = $(shell find openstack_schedules -name \*.py)

EXTRACT_DEPS = $(EXTRACTOR) Makefile
SOLVER_DEPS = $(SOLUTIONS_DIR_EXISTS) $(TIMINGS_DIR_EXISTS)
REPORTER_DEPS = $(REPORTER) $(PY) Makefile $(REPORTS_DIR_EXISTS)

# Input files
DATA_DIR = data
RAW = $(DATA_DIR)/Train\ PTG\ cleaned.csv

GMPL = schedule.mod

# Input data files which are autogenerated
TRACKS = $(DATA_DIR)/tracks.csv
CONFLICTS = $(DATA_DIR)/conflicts.csv
CPLEX = $(OUTPUT_DIR)/schedule-cplex.lp

# Input data files which *will* be autogenerated when I write the code
# to do it, but need to be written manually for now.
DATA_DIR_EXISTS = $(DATA_DIR)/$(DIR_EXISTS)

GMPL_FILES = \
	$(GMPL) $(TRACKS) $(CONFLICTS)

# Output files
DIR_EXISTS = .dir-exists
OUTPUT_DIR = output
SOLUTIONS_DIR = $(OUTPUT_DIR)/solutions
REPORTS_DIR = $(OUTPUT_DIR)/reports
TIMINGS_DIR = $(OUTPUT_DIR)/timings
SOLUTIONS_DIR_EXISTS = $(SOLUTIONS_DIR)/$(DIR_EXISTS)
REPORTS_DIR_EXISTS = $(REPORTS_DIR)/$(DIR_EXISTS)
TIMINGS_DIR_EXISTS = $(TIMINGS_DIR)/$(DIR_EXISTS)

GLPSOL_TIMING = $(TIMINGS_DIR)/glpsol.txt
SCIP_TIMING = $(TIMINGS_DIR)/scip.txt
CBC_TIMING = $(TIMINGS_DIR)/cbc.txt

GLPSOL_SOLUTION = $(SOLUTIONS_DIR)/glpsol.txt
SCIP_SOLUTION = $(SOLUTIONS_DIR)/scip.txt
CBC_SOLUTION = $(SOLUTIONS_DIR)/cbc.txt

GLPSOL_REPORT = $(REPORTS_DIR)/glpsol.txt
SCIP_REPORT = $(REPORTS_DIR)/scip.txt
CBC_REPORT = $(REPORTS_DIR)/cbc.txt
REPORTS = $(GLPSOL_REPORT) $(SCIP_REPORT) $(CBC_REPORT)

# Solver execution
SOLVERS_DIR = solvers
GLPSOL_INPUTS = --math $(GMPL) # --data $(GMPL_...)
GLPSOL_SOLVE_OPTIONS = --tmlim $(SOLVER_TIMEOUT)
SCIP = $(SOLVERS_DIR)/scip
SCIP_SET = $(SOLVERS_DIR)/scip.set
CBC = $(SOLVERS_DIR)/Cbc-2.10-linux-x86_64-gcc4.8/bin/cbc
CBC_LIBRARY_PATH = $(SOLVERS_DIR)/Cbc-2.10-linux-x86_64-gcc4.8/lib
#CBC = $(SOLVERS_DIR)/Cbc-2.9.8/build/Cbc/src/cbc
CBC_SOLVE_OPTIONS = sec $(SOLVER_TIMEOUT)

# Reporter arguments
REPORTER_ARGS = $(TRACKS)

.PHONY: default
default: cbc

.PHONY: all
all: $(REPORTS)

prep:
	mkdir -p \
		$(DATA_DIR) \
		$(SOLUTIONS_DIR) $(TIMINGS_DIR) $(REPORTS_DIR)

$(TRACKS) $(CONFLICTS): $(RAW) $(EXTRACT_DEPS)
	$(EXTRACTOR) "$<" $(TRACKS) $(CONFLICTS)

compare: all
	@for report in $(REPORTS_DIR)/{glpsol,scip,cbc}.txt; do \
		echo; \
		awk '/^Solver:/,/CPU/ {print}' $$report; \
	done

compare-cbc-scip: $(CBC_REPORT) $(SCIP_REPORT)
	bash -c '\
	    bandx () { sed "s/\([a-z]\+\)[123]/\1X/g" "$$@"; }; \
	    dl --label cbc --label scip \
	    <(bandx $(CBC_REPORT)) \
	    <(bandx $(SCIP_REPORT))'

compare-cbc-glpsol: $(CBC_REPORT) $(GLPSOL_REPORT)
	bash -c '\
	    bandx () { sed "s/\([a-z]\+\)[123]/\1X/g" "$$@"; }; \
	    dl --label cbc --label glpsol \
	    <(bandx $(CBC_REPORT)) \
	    <(bandx $(GLPSOL_REPORT))'


##############################################################################
# targets shared by multiple solvers

# https://adirondackfirefly.wordpress.com/2012/04/12/makefiles-howto-threadsafe-mkdir/
%/$(DIR_EXISTS):
	touch $@

.PHONY: check
check: $(GMPL) $(GMPL_FILES) $(GMPL_STUDENT_SKILLS) $(DATA_DIR_EXISTS)
	glpsol $(GLPSOL_INPUTS) --check

$(CPLEX): $(GMPL) $(GMPL_FILES) $(GMPL_STUDENT_SKILLS) $(DATA_DIR_EXISTS)
	glpsol $(GLPSOL_INPUTS) --check --wlp $@
	wc -l $@


##############################################################################
# glpsol / glpk

.PHONY: glpsol
glpsol: $(GLPSOL_REPORT)

GLPSOL_SED_FIXUP = 's/, )/)/; s/, $$//; s/,)/)/g;'
$(GLPSOL_SOLUTION): $(GMPL) $(GMPL_FILES) $(GMPL_STUDENT_SKILLS) \
    $(SOLVER_DEPS)
	time -o $(GLPSOL_TIMING) \
		glpsol $(GLPSOL_INPUTS) $(GLPSOL_SOLVE_OPTIONS) --output $@ | \
		sed $(GLPSOL_SED_FIXUP)
	# For use with --log $@
	#sed -i $(GLPSOL_SED_FIXUP) $@

$(GLPSOL_REPORT): $(GLPSOL_SOLUTION) $(REPORTER_DEPS)
	$(REPORTER) glpsol $< $(REPORTER_ARGS) $(GLPSOL_TIMING) > $@
	cat $@


##############################################################################
# scip

.PHONY: scip
scip: $(SCIP_REPORT)

$(SCIP_SOLUTION): $(CPLEX) Makefile \
    $(SOLVER_DEPS)
	rm -f $@
	time -o $(SCIP_TIMING) $(SCIP) -f $< -l $@

$(SCIP_REPORT): $(SCIP_SOLUTION) $(SCIP_SET) $(REPORTER_DEPS)
	$(REPORTER) scip $< $(REPORTER_ARGS) $(SCIP_TIMING) > $@
	cat $@


##############################################################################
# cbc

.PHONY: cbc
cbc: $(CBC_REPORT)

$(CBC_SOLUTION): $(CPLEX) Makefile \
    $(SOLVER_DEPS)
	echo "limits/time = $(SOLVER_TIMEOUT)" > $(SCIP_SET)
	LD_LIBRARY_PATH=$(CBC_LIBRARY_PATH) time -o $(CBC_TIMING) \
		 $(CBC) $< $(CBC_SOLVE_OPTIONS) solve solu $@

$(CBC_REPORT): $(CBC_SOLUTION) $(REPORTER_DEPS)
	$(REPORTER) cbc $< $(REPORTER_ARGS) $(CBC_TIMING) > $@
	cat $@


##############################################################################
# cleaning

.PHONY: clean-glpsol
clean-glpsol:
	rm -f $(GLPSOL_SOLUTION) $(GLPSOL_TIMING) $(GLPSOL_REPORT)

.PHONY: clean-scip
clean-scip:
	rm -f $(SCIP_SOLUTION) $(SCIP_TIMING) $(SCIP_REPORT)

.PHONY: clean-cbc
clean-cbc:
	rm -f $(CBC_SOLUTION) $(CBC_TIMING) $(CBC_REPORT)

.PHONY: clean
clean: clean-glpsol clean-scip clean-cbc
